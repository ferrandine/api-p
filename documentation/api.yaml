openapi: 3.0.0
info:
  description: "Documentation for the Ferrandine api."
  version: "1.0.0"
  title: "Ferrandine API"
  contact:
    email: "sebastien.baudray@hetic.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "clothe"
  description: "Clothes"
- name: "alteration"
  description: "Alterations"
- name: "service"
  description: "Services"
- name: "command"
  description: "Commands"
- name: "user"
  description: "Users"
paths:
  /clothes:
    get:
      tags:
      - "clothe"
      summary: "Index all clothes"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Clothe"
    post:
      tags:
      - "clothe"
      summary: "Create a new clothe"
      requestBody:
        description: "Clothe object to be created"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clothe:
                  $ref: "#/components/schemas/Clothe"
      responses:
        "200":
          description: OK
  /clothes/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      tags: 
      - "clothe"
      summary: "Show one clothe"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Clothe"
    put:
      tags:
      - "clothe"
      summary: "Update an existing clothe"
      requestBody:
        description: "Clothe object to be updated"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clothe:
                  $ref: "#/components/schemas/Clothe"
      responses:
        "200":
          description: OK
    patch:
      tags:
      - "clothe"
      summary: "Update an existing clothe"
      requestBody:
        description: "Clothe object to be updated"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clothe:
                  $ref: "#/components/schemas/Clothe"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - "clothe"
      summary: "Delete an existing clothe"
      responses:
        '204':
          description: The resource was deleted successfully.
  /alterations:
    get:
      tags:
      - "alteration"
      summary: "Index all alterations"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Alteration"
    post:
      tags:
      - "alteration"
      summary: "Create a new alteration"
      requestBody:
        description: "Alteration object to be created"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alteration:
                  $ref: "#/components/schemas/Alteration"
      responses:
        "200":
          description: OK
  /alterations/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      tags: 
      - "alteration"
      summary: "Show one alteration"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Alteration"
    put:
      tags:
      - "alteration"
      summary: "Update an existing alteration"
      requestBody:
        description: "Alteration object to be updated"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alteration:
                  $ref: "#/components/schemas/Alteration"
      responses:
        "200":
          description: OK
    patch:
      tags:
      - "alteration"
      summary: "Update an existing alteration"
      requestBody:
        description: "Alteration object to be updated"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alteration:
                  $ref: "#/components/schemas/Alteration"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - "alteration"
      summary: "Delete an existing alteration"
      responses:
        '204':
          description: The resource was deleted successfully.
  /users:
    get:
      tags:
      - "user"
      summary: "Index all users"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
      - "user"
      summary: "Create a new user"
      requestBody:
        description: "User object to be created"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
                credentials:
                  $ref: "#/components/schemas/Credential"
      responses:
        "200":
          description: OK
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      tags: 
      - "user"
      summary: "Show one user"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
      - "user"
      summary: "Update an existing user"
      requestBody:
        description: "User object to be updated"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
    patch:
      tags:
      - "user"
      summary: "Update an existing user"
      requestBody:
        description: "User object to be updated"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - "user"
      summary: "Delete an existing user"
      responses:
        '204':
          description: The resource was deleted successfully.
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message: 
          type: string
    Clothe:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: "Clothe's key"
        image:
          type: string
          description: "Clothe's image url"
        label:
          type: string
          description: "Clothe's label in french"
      xml:
        name: "Clothe"
    Alteration:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: "Alteration's key"
        image:
          type: string
          description: "Alteration's image url"
        label:
          type: string
          description: "Alteration's label in french"
        description:
          type: string
          description: "Alteration's description"
      xml:
        name: "Alteration"
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
          description: "Customer's comment on a command"
        rating:
          type: integer
          format: int64
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          description: "Customer's rating on a command"
      xml:
        name: "Review"
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        petId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "placed"
          - "approved"
          - "delivered"
        complete:
          type: "boolean"
          default: false
      xml:
        name: "Order"
    Credential:
      type: object
      properties:
        email:
          type: string
        password: 
          type: string
      xml: 
        name: "Credential"
            
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: integer
          format: int64
          enum:
            - 0
            - 1
            - 2
          description: "User's definition. 0 for admin, 1 for customer, 2 for sewer"
        first_name:
          type: string
        last_name:
          type: string
        sex:
          type: integer
          format: "int64"
          enum:
            - 0
            - 1
            - 2
          description: "ISO 5218 sex definition"
        birthdate: 
          type: string
          description: "ISO 8601 date"
          example: "1995-02-23"
        country: 
          type: string
          description: "Country's ISO 3166-1 alpha-2 code"
          example: "FR"
        city:
          type: string
        post_code:
          type: string
          example: "94500"
        street:
          type: string
          example: "1 avenue des Champs-Elysées"
      xml:
        name: "User"
    Sewer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        first_name:
          type: string
        last_name: 
          type: string
        picture: 
          type: string
          description: "Sewer's profile picture url"
        rating:
          type: integer
          format: int64
          nullable: true
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
